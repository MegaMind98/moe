#lang shplait
import:
  open:
    "class.rhm"
    "inherit.rhm"
    "typed_class.rhm"
    "inherit_parse.rhm"

// ----------------------------------------

fun parse_t_class(s :: Syntax) :: (Symbol * ClassT):
  match s
  | 'class $name($field, ...):
       extends $parent_name
       constructor
       begin:
         $cons_name
         ...
       private $p_method
       ...
       $method
       ...':
      values(syntax_to_symbol(name),
             classT(syntax_to_symbol(parent_name),
                    parse_constructors(syntax_to_list('[$cons_name, ...]'), []),                    
                    map(parse_t_field,
                        syntax_to_list('[$field, ...]')),
                    map(parse_t_method,
                        syntax_to_list('[$method, ...]')),
                    map(parse_t_method,
                        syntax_to_list('[$p_method, ...]'))))
  | 'class $name($field, ...):
       extends $parent_name
       private $p_method
       ...
       $method
       ...':
      values(syntax_to_symbol(name),
             classT(syntax_to_symbol(parent_name),
                    [],
                    map(parse_t_field,
                        syntax_to_list('[$field, ...]')),
                    map(parse_t_method,
                        syntax_to_list('[$method, ...]')),
                    map(parse_t_method,
                        syntax_to_list('[$p_method, ...]'))))
  | ~else: error(#'parse_class, "invalid input: " +& s)

fun parse_const(l):
  match l
  | '$exp :: $ty':
      #//
      println(values(parse(exp),
                     parse_type(ty)))
      values(parse(exp),
             parse_type(ty))
  | ~else: error(#'parse_const, "invalid input: " +& l)

fun parse_constructors(l, v):
  map(parse_const, l)
  
fun parse_t_field(s :: Syntax) :: (Symbol * Type):
  match s
  | '$name :: $ty':
      values(syntax_to_symbol(name),
             parse_type(ty))
  | ~else: error(#'parse_t_field, "invalid input: " +& s)

fun parse_t_method(s :: Syntax) :: (Symbol * MethodT):
  match s
  |'private method $name(arg :: $arg_ty) :: $res_ty: $body':
     values(syntax_to_symbol(name),
            methodT(parse_type(arg_ty),
                    parse_type(res_ty),
                    parse(body)))                                                       
  |'method $name(arg :: $arg_ty) :: $res_ty: $body':
     values(syntax_to_symbol(name),
            methodT(parse_type(arg_ty),
                    parse_type(res_ty),
                    parse(body)))
  | ~else: error(#'parse_t_method, "invalid input: " +& s)

fun parse_type(s :: Syntax) :: Type:
  match s
  | 'Int': intT()
  | 'null': nullT()
  | ~else:
      cond
      | syntax_is_symbol(s):
          objT(syntax_to_symbol(s))
      | ~else: error(#'parse_type, "invalid input: " +& s)

module test:
  check: parse_type('null')
         ~is nullT()
  check: parse_type('Int')
         ~is intT()
  check: parse_type('Object')
         ~is objT(#'Object)
  check: parse_type('()')
         ~raises "invalid input"

  check: parse_t_field('x :: Int')
         ~is values(#'x, intT())
  check: parse_t_field('x')
         ~raises "invalid input"

  check: parse_t_method('method m(arg :: Int) :: Object: this')
         ~is values(#'m, methodT(intT(), objT(#'Object), thisI()))
  check: parse_t_method('m 1')
         ~raises "invalid input"
  
  check: parse_t_class('class Posn3D(x :: Int,
                                     y :: Int):
                          extends Posn
                          constructor
                          begin:
                            this.x := 5 :: Int
                            this.y := 10 :: Int
                          private method jk(arg :: Int) :: Int:
                            arg
                          private method jk2(arg :: Int) :: Int:
                            arg
                          method m1(arg :: Int) :: Int:
                            arg
                          method m2(arg :: Int) :: Object:
                            this')
         ~is values(#'Posn3D,
                    classT(#'Posn,
                           [values(setI(thisI(), #'x, intI(5)), intT()),
                            values(setI(thisI(), #'y, intI(10)), intT())],
                           [values(#'x, intT()), values(#'y, intT())],
                           [
                             values(#'m1, methodT(intT(), intT(), argI())),
                             values(#'m2, methodT(intT(), objT(#'Object), thisI()))
                           ],
                           [
                             values(#'jk, methodT(intT(), intT(), argI())),
                             values(#'jk2, methodT(intT(), intT(), argI()))
                           ]))
  check: parse_t_class('class Posn3D(x :: Int,
                                     y :: Int):
                          extends Posn
                          method m1(arg :: Int) :: Int:
                            arg
                          method m2(arg :: Int) :: Object:
                            this')
         ~is values(#'Posn3D,
                    classT(#'Posn,
                           [],
                           [values(#'x, intT()),
                            values(#'y, intT())],
                           [values(#'m1, methodT(intT(), intT(), argI())),
                            values(#'m2, methodT(intT(), objT(#'Object), thisI()))],
                           []))
  check: parse_t_class('class')
         ~raises "invalid input"

// ----------------------------------------

fun interp_t_prog(classes :: Listof(Syntax), a :: Syntax) :: Syntax:
  let v = interp_t(parse(a),
                   map(parse_t_class, classes)):
    match v
    | intV(n): integer_to_syntax(n)
    | objV(class_name, field_vals): 'object'
    | nullV(): 'null'

module test:
  check: interp_t_prog([], 'null')
         ~is 'null'
  check: interp_t_prog([], '(Posn)4')
         ~raises "not a number"
  check: interp_t_prog(['class Empty():
                           extends Object'],
                       'new Empty()')
         ~is 'object'
         
  check: interp_t_prog(
           [
             'class Posn(x :: Int,
                         y :: Int):
                extends Object
                method mdist(arg :: Int) :: Int:
                  this.x + this.y
                method addDist(arg :: Posn) :: Int:
                  arg.mdist(0) + this.mdist(0)',
             'class Posn3D(z :: Int):
                extends Posn
                method mdist(arg :: Int) :: Int:
                  this.z + super.mdist(arg)'
           ],
           '(new Posn3D(5, 3, 1)).addDist(new Posn(2, 7))'
         )
         ~is '18'
  check: interp_t_prog(
           [
             'class Posn(x :: Int,
                         y :: Int):
                extends Object
                method mdist(arg :: Int) :: Int:
                  this.x + this.y
                method addDist(arg :: Posn) :: Int:
                  arg.mdist(0) + this.mdist(0)',
             'class Posn3D(z :: Int):
                extends Posn
                method mdist(arg :: Int) :: Int:
                  this.z + super.mdist(arg)'
           ],
           'if 2 == 0 | 2 | 3'
         )
         ~is '3'

  check: interp_t_prog(
           [
             'class Posn(x :: Int,
                         y :: Int):
                extends Object
                constructor
                begin:
                  this.x := 10 :: Int
                  this.y := 11 :: Int
                method mdist(arg :: Int) :: Int:
                  this.x + this.y
                method addDist(arg :: Posn) :: Int:
                  arg.mdist(0) + this.mdist(0)',
             'class Posn3D(z :: Int):
                extends Posn
                method mdist(arg :: Int) :: Int:
                  this.z + super.mdist(arg)'
           ],
           'if 2 == 0 | (new Posn()).x | (new Posn()).y'
         )
         ~is '11'

  check: interp_t_prog(
           [
             'class Posn(x :: Int,
                         y :: Int):
                extends Object
                constructor
                begin:
                  this.x := 10 :: Int
                  this.y := 11 :: Int
                private method hello(arg :: Int) :: Int:
                  arg
                method mdist(arg :: Int) :: Int:
                  this.hello(arg) + this.y
                method addDist(arg :: Posn) :: Int:
                  arg.mdist(0) + this.mdist(0)',
             'class Posn3D(z :: Int):
                extends Posn
                method mdist(arg :: Int) :: Int:
                  this.z + super.mdist(arg)'
           ],
           'if 2 == 0 | (new Posn()).mdist(4) | (new Posn()).mdist(3)'
         )
         ~is '14'
